name: Auto Tag Version

permissions:
  contents: write

on:
  pull_request:
    types: [closed]

jobs:
  auto-tag:
    if: ${{ github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get last tag
        id: get_last_tag
        run: |
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null)
          if [ -z "$last_tag" ]; then
            last_tag="v0.0.0"
          fi
          echo "Last tag: $last_tag"
          echo "last_tag=$last_tag" >> $GITHUB_OUTPUT

      - name: Determine new version
        id: determine_version
        uses: actions/github-script@v6
        env:
          LAST_TAG: ${{ steps.get_last_tag.outputs.last_tag }}
        with:
          script: |
            const lastTag = process.env.LAST_TAG;
            const versionRegex = /^(\d+)\.(\d+)\.(\d+)$/;
            const match = lastTag.match(versionRegex);
            if (!match) {
              throw new Error('Invalid tag format: ' + lastTag);
            }
            let major = parseInt(match[1]);
            let minor = parseInt(match[2]);
            let patch = parseInt(match[3]);
            
            const prLabels = context.payload.pull_request.labels.map(label => label.name);
            console.log("PR labels:", prLabels);
            
            if (prLabels.includes("breaking-changes") || prLabels.includes("release")) {
              major = major + 1;
              minor = 0;
              patch = 0;
            } else if (prLabels.includes("feature") || prLabels.includes("perf")) {
              minor = minor + 1;
              patch = 0;
            } else if (prLabels.some(label => ["refactor", "fix", "documents", "style", "test", "build", "ci", "revert"].includes(label))) {
              patch = patch + 1;
            }
            const newVersion = `${major}.${minor}.${patch}`;
            core.info(`New version: ${newVersion}`);
            return newVersion;

      - name: Create new tag
        id: create_tag
        run: |
          new_version="${{ steps.determine_version.outputs.result }}"
          echo "Creating new tag: $new_version"
          git tag "$new_version"
          git push origin "$new_version"