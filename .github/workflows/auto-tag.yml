name: Auto Tag Release on PR Merge

permissions:
  contents: write

on:
  pull_request:
    types: [closed]

jobs:
  tag_release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Get commit messages since last tag
        id: commit_messages
        run: |
          if [ "${{ env.latest_tag }}" = "0.0.0" ]; then
            messages=$(git log --pretty=format:"%s")
          else
            messages=$(git log ${{ env.latest_tag }}..HEAD --pretty=format:"%s")
          fi
          echo "Commits: $messages"
          echo "messages=$messages" >> $GITHUB_ENV

      - name: Determine version bump
        id: bump
        run: |
          bump=""
          if echo "${{ env.messages }}" | grep -iE "(release|breaking-changes)" > /dev/null; then
            bump="major"
          elif echo "${{ env.messages }}" | grep -iE "(feature|perf)" > /dev/null; then
            bump="minor"
          elif echo "${{ env.messages }}" | grep -iE "(refactor|fix|documents|style|test|build|ci|revert)" > /dev/null; then
            bump="patch"
          else
            bump="patch"
          fi
          echo "Bump type: $bump"
          echo "bump_type=$bump" >> $GITHUB_ENV

      - name: Bump version
        id: version_bump
        run: |
          function bump_version() {
            IFS='.' read -r major minor patch <<< "$1"
            case "$2" in
              major)
                major=$((major + 1))
                ;;
              minor)
                minor=$((minor + 1))
                ;;
              patch)
                patch=$((patch + 1))
                ;;
            esac
            echo "${major}.${minor}.${patch}"
          }

          current_version=${{ env.latest_tag }}
          if [ "$current_version" = "0.0.0" ]; then
            current_version="0.1.0"
          fi

          new_version=$(bump_version $current_version ${{ env.bump_type }})

          while git rev-parse "refs/tags/$new_version" >/dev/null 2>&1; do
            echo "Tag $new_version already exists, bumping patch version"
            new_version=$(bump_version $new_version patch)
          done

          echo "Current version: $current_version"
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Create new git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}
